#@ load("@ytt:data", "data")

#@ if/end "api-entity-template" not in data.values.excluded_templates:
---
apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: api-entity-template
spec:
  params:
    - name: serviceAccount
      default: default

  healthRule:
    singleConditionType: Ready

  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:json", "json")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-api-entity-register"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "api-entity-register" })
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: tekton-taskrun

      inputs:
        serviceAccount: #@ data.values.params.serviceAccount
        taskRef:
          kind: ClusterTask
          name: api-entity-register
        params:
          - name: tap_values
            value: #@ json.encode(data.values)
          - name: cnrs_domain_name
            value: tap-testing-api-entity.tapdemo.vmware.com
          - name: tap_gui_url
            value: http://tap-gui.tap-testing-api-entity.tapdemo.vmware.com
          - name: workload_name
            value: #@ data.values.workload.metadata.name
          - name: workload_namespace
            value: #@ data.values.workload.metadata.namespace
          - name: openapi_endpoint
            value: "/v3/api-docs"
