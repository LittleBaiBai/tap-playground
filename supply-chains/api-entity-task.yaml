#@ load("@ytt:data", "data")
#@yaml/text-templated-strings

#@ if/end "api-entity-register" not in data.values.excluded_templates:
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: api-entity-register
spec:
  description: |-
    a task that generates and registers API entity based on annotations from a Workload.
  params:
    - name: tap_values
      type: string
    - name: cnrs_domain_name
      type: string
    - name: tap_gui_url
      type: string
      description: >
        url of TAP GUI
    - name: workload_name
      type: string
      description: name of the workload
    - name: workload_namespace
      type: string
      description: namespace of the workload
    - name: openapi_endpoint
      type: string
    - name: server_url
      type: string
      description: Server URL to define in the OpenAPI Spec generated
  steps:
    - name: main
      image: shrutii300/alpine-bash-curl-ssl
      securityContext:
        runAsUser: 0
      script: |-
        #!/usr/bin/env bash

        set -o errexit
        set -o pipefail
        set -o xtrace

        cd `mktemp -d`

        echo "ClusterTask/api-entity-register: Executing API Entity task"
        # Define OpenAPI Server url with default
        export openapi_server='$(params.server_url)'
        if [ -z "$openapi_server" ]; then
          export openapi_server='$(params.workload_name).$(params.workload_namespace)'
        fi
        echo "ClusterTask/api-entity-register: '$openapi_server' openAPI Server "
        
        export openapi_definition='http://$(params.workload_name).$(params.workload_namespace).$(params.cnrs_domain_name)$(params.openapi_endpoint)'
        echo $openapi_definition
        export openapi_spec=$(curl -H"X-Forwarded-Host: $openapi_server" --retry 10 --fail --retry-all-errors --retry-delay 60 -s "$openapi_definition")

        echo "ClusterTask/api-entity-register: OpenAPI Spec found $openapi_spec"
        cat << EOF | cat > api.yaml
        ---
        apiVersion: backstage.io/v1alpha1
        kind: API
        metadata:
          name: $(params.workload_name)
          namespace: $(params.workload_namespace)
          description: The Spotify web API
          tags:
            - spotify
            - rest
        spec:
          type: openapi
          lifecycle: experimental # how can we infer lifecycle
          owner: default-team # where should we get the owner from
          definition: |
            $openapi_spec
        EOF

        cat api.yaml

        curl --request POST $(params.tap_gui_url)/api/catalog/immediate/entities -H "Content-type: text/x-yaml" --data-binary @api.yaml -v
