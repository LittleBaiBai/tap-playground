#@ load("@ytt:data", "data")

#@ if/end "kaniko-build" not in data.values.excluded_templates:
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: kaniko-build
spec:
  description: This task builds a simple Dockerfile with kaniko and pushes
    to a registry. It then stores the image ref as a result.
  params:
    - name: source_tar
      description: URL to tarball of source code
      type: string
    - name: image
      description: Name (reference) of the image to build.
      type: string
    - name: dockerfile
      description: Path to the Dockerfile to build.
      type: string
      default: ./Dockerfile
    - name: context
      description: The build context used by Kaniko.
      type: string
      default: .
    - name: extra_args
      description: Extra args to pass to Kaniko build
      type: array
      default: []
    - name: ca_cert_data
      type: string
      default: ""
      description: >
        PEM encoded certificate data for the image registry where the image
        will be pushed to.
  results:
    - description: Digest of the image just built.
      name: image_digest
    - description: Ref of the image just built.
      name: image_ref
  steps:
    - name: pull-source-code
      image: harbor-repo.vmware.com/dockerhub-proxy-cache/paketobuildpacks/build:base-cnb
      script: |
        #!/usr/bin/env bash

        set -o errexit
        set -o xtrace

        source="$(params.source_tar)"

        cd `mktemp -d`
        curl -sL -o source.tar.gz "${source}"
        tar -xzf source.tar.gz -C /source
      volumeMounts:
        - name: source-dir
          mountPath: /source
    - name: copy-docker-config-and-certs
      image: harbor-repo.vmware.com/dockerhub-proxy-cache/paketobuildpacks/build:base-cnb
      script: |
        #!/usr/bin/env bash

        set -o errexit
        set -o xtrace

        cp /tekton/creds/.docker/config.json /docker-config/

        cp /etc/ssl/certs/ca-certificates.crt /certs/ca-certificates.crt
        if [[ ! -z "$(params.ca_cert_data)" ]]; then
          echo "$(params.ca_cert_data)" >> /certs/ca-certificates.crt
        fi
      volumeMounts:
        - name: docker-config
          mountPath: /docker-config
        - name: ca-certs
          mountPath: /certs
    - name: build-and-push
      image: gcr.io/kaniko-project/executor@sha256:07ccf302c19ddd6f83c4dd21109833b7d16b5621b241d022442f11dfa0414d76
      args:
        - $(params.extra_args)
        - --dockerfile=$(params.dockerfile)
        - --context=dir:///source/$(params.context)
        - --destination=$(params.image)
        - --digest-file=$(results.image_digest.path)
        - --ignore-path=//product_uuid
      securityContext:
        runAsUser: 0
      volumeMounts:
        - name: source-dir
          mountPath: /source
        - name: docker-config
          mountPath: /kaniko/.docker
        - name: ca-certs
          mountPath: /kaniko/ssl/certs
    - name: write-image-ref
      image: harbor-repo.vmware.com/dockerhub-proxy-cache/paketobuildpacks/build:base-cnb
      script: |
        #!/usr/bin/env bash

        set -o errexit
        set -o xtrace

        image="$(params.image)"
        digest_path="$(results.image_digest.path)"
        digest="$(cat ${digest_path})"

        echo -n "${image}@${digest}" | tee "$(results.image_ref.path)"
  volumes:
    - name: docker-config
      emptyDir: {}
    - name: source-dir
      emptyDir: {}
    - name: ca-certs
      emptyDir: {}
