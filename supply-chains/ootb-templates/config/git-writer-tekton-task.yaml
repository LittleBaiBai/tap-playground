#@ load("@ytt:data", "data")

#@ if/end "git-writer" not in data.values.excluded_templates:
---
apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  name: git-writer
spec:
  description: |-
    A task that writes a given set of files (provided as a json base64-encoded)
    to git repository under a specified directory.
  params:
    - name: git_repository
      description: The repository path
      type: string
    - name: git_branch
      description: The git branch to read and write
      type: string
      default: "main"
    - name: git_user_email
      description: User email address
      type: string
      default: "example@example.com"
    - name: git_user_name
      description: User name
      type: string
      default: "Example"
    - name: git_commit_message
      description: Message for the git commit
      type: string
      default: "New Commit"
    - name: sub_path
      description: Sub directory in which to write
      type: string
      default: "config"
    - name: git_files
      type: string
      description: >
        Base64-encoded json map of files to write to registry, for example -
        eyAiUkVBRE1FLm1kIjogIiMgUmVhZG1lIiB9
  steps:
    - name: git-clone-and-push
      image: harbor-repo.vmware.com/kontinue/config-writer
      securityContext:
        runAsUser: 0
      workingDir: /root
      script: |
        #!/usr/bin/env bash

        set -o errexit
        set -o xtrace

        if [ -d $(credentials.path)/.ssh ] ; then
          ln -s $(credentials.path)/.ssh /root/.ssh
        fi

        if git clone --depth 1 -b "$(params.git_branch)" "$(params.git_repository)" ./repo; then
          cd ./repo
        else
          git clone --depth 1 "$(params.git_repository)" ./repo
          cd ./repo
          git checkout -b "$(params.git_branch)"
        fi

        git config user.email "$(params.git_user_email)"
        git config user.name "$(params.git_user_name)"

        mkdir -p $(params.sub_path) && rm -rf $(params.sub_path)/*
        cd $(params.sub_path)

        echo '$(params.git_files)' | base64 --decode > files.json
        eval "$(cat files.json | jq -r 'to_entries | .[] | @sh "mkdir -p $(dirname \(.key)) && echo \(.value) > \(.key) && git add \(.key)"')"

        git commit -m "$(params.git_commit_message)"
        git push origin $(params.git_branch)
